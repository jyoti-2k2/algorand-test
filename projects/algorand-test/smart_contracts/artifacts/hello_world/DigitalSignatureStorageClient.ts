/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"DigitalSignatureStorage","structs":{},"methods":[{"name":"storeSignature","args":[{"type":"string","name":"signerAddress","desc":"Address of the person signing"},{"type":"string","name":"signatureData","desc":"Digital signature string (e.g., hash of document)"}],"returns":{"type":"string","desc":"The stored signature"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Save a digital signature with the signer's address","events":[],"recommendations":{}},{"name":"getSignature","args":[],"returns":{"type":"string","desc":"The stored signature"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Retrieve the stored signature","events":[],"recommendations":{}},{"name":"getSigner","args":[],"returns":{"type":"string","desc":"The signer address"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Retrieve the signerâ€™s address","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"signature":{"keyType":"AVMString","valueType":"AVMString","key":"c2lnbmF0dXJl"},"signer":{"keyType":"AVMString","valueType":"AVMString","key":"c2lnbmVy"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[79,103,127],"errorMessage":"OnCompletion is not NoOp"},{"pc":[168],"errorMessage":"can only call when creating"},{"pc":[82,106,130],"errorMessage":"can only call when not creating"},{"pc":[188,193],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSAwCiAgICBieXRlY2Jsb2NrICJzaWduYXR1cmUiICJzaWduZXIiIDB4MTUxZjdjNzUgIiIKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5hbGdvLnRzOjcKICAgIC8vIGtleTogInNpZ25hdHVyZSIsCiAgICBieXRlY18wIC8vICJzaWduYXR1cmUiCiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czo4CiAgICAvLyBpbml0aWFsVmFsdWU6ICIiLAogICAgYnl0ZWNfMyAvLyAiIgogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LmFsZ28udHM6Ni05CiAgICAvLyBzaWduYXR1cmUgPSBHbG9iYWxTdGF0ZTxzdHJpbmc+KHsKICAgIC8vICAga2V5OiAic2lnbmF0dXJlIiwKICAgIC8vICAgaW5pdGlhbFZhbHVlOiAiIiwKICAgIC8vIH0pOwogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5hbGdvLnRzOjEzCiAgICAvLyBrZXk6ICJzaWduZXIiLAogICAgYnl0ZWNfMSAvLyAic2lnbmVyIgogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LmFsZ28udHM6MTQKICAgIC8vIGluaXRpYWxWYWx1ZTogIiIsCiAgICBieXRlY18zIC8vICIiCiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czoxMi0xNQogICAgLy8gc2lnbmVyID0gR2xvYmFsU3RhdGU8c3RyaW5nPih7CiAgICAvLyAgIGtleTogInNpZ25lciIsCiAgICAvLyAgIGluaXRpYWxWYWx1ZTogIiIsCiAgICAvLyB9KTsKICAgIGFwcF9nbG9iYWxfcHV0CgptYWluX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5hbGdvLnRzOjMKICAgIC8vIGV4cG9ydCBjbGFzcyBEaWdpdGFsU2lnbmF0dXJlU3RvcmFnZSBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AxMAogICAgcHVzaGJ5dGVzcyAweDBlNjRiMDQ0IDB4ZmQ2ODg1ZjYgMHhiNzcxMTliNyAvLyBtZXRob2QgInN0b3JlU2lnbmF0dXJlKHN0cmluZyxzdHJpbmcpc3RyaW5nIiwgbWV0aG9kICJnZXRTaWduYXR1cmUoKXN0cmluZyIsIG1ldGhvZCAiZ2V0U2lnbmVyKClzdHJpbmciCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX3N0b3JlU2lnbmF0dXJlX3JvdXRlQDUgbWFpbl9nZXRTaWduYXR1cmVfcm91dGVANiBtYWluX2dldFNpZ25lcl9yb3V0ZUA3CgptYWluX2FmdGVyX2lmX2Vsc2VAMTQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czozCiAgICAvLyBleHBvcnQgY2xhc3MgRGlnaXRhbFNpZ25hdHVyZVN0b3JhZ2UgZXh0ZW5kcyBDb250cmFjdCB7CiAgICBpbnRjXzEgLy8gMAogICAgcmV0dXJuCgptYWluX2dldFNpZ25lcl9yb3V0ZUA3OgogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LmFsZ28udHM6NDEKICAgIC8vIGdldFNpZ25lcigpOiBzdHJpbmcgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGdldFNpZ25lcgogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzIgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0U2lnbmF0dXJlX3JvdXRlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czozMwogICAgLy8gZ2V0U2lnbmF0dXJlKCk6IHN0cmluZyB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZ2V0U2lnbmF0dXJlCiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWNfMiAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9zdG9yZVNpZ25hdHVyZV9yb3V0ZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LmFsZ28udHM6MjMKICAgIC8vIHN0b3JlU2lnbmF0dXJlKHNpZ25lckFkZHJlc3M6IHN0cmluZywgc2lnbmF0dXJlRGF0YTogc3RyaW5nKTogc3RyaW5nIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LmFsZ28udHM6MwogICAgLy8gZXhwb3J0IGNsYXNzIERpZ2l0YWxTaWduYXR1cmVTdG9yYWdlIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGV4dHJhY3QgMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czoyMwogICAgLy8gc3RvcmVTaWduYXR1cmUoc2lnbmVyQWRkcmVzczogc3RyaW5nLCBzaWduYXR1cmVEYXRhOiBzdHJpbmcpOiBzdHJpbmcgewogICAgY2FsbHN1YiBzdG9yZVNpZ25hdHVyZQogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzIgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LmFsZ28udHM6MwogICAgLy8gZXhwb3J0IGNsYXNzIERpZ2l0YWxTaWduYXR1cmVTdG9yYWdlIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAxNAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czo6RGlnaXRhbFNpZ25hdHVyZVN0b3JhZ2Uuc3RvcmVTaWduYXR1cmUoc2lnbmVyQWRkcmVzczogYnl0ZXMsIHNpZ25hdHVyZURhdGE6IGJ5dGVzKSAtPiBieXRlczoKc3RvcmVTaWduYXR1cmU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czoyMwogICAgLy8gc3RvcmVTaWduYXR1cmUoc2lnbmVyQWRkcmVzczogc3RyaW5nLCBzaWduYXR1cmVEYXRhOiBzdHJpbmcpOiBzdHJpbmcgewogICAgcHJvdG8gMiAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czoxMwogICAgLy8ga2V5OiAic2lnbmVyIiwKICAgIGJ5dGVjXzEgLy8gInNpZ25lciIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5hbGdvLnRzOjI0CiAgICAvLyB0aGlzLnNpZ25lci52YWx1ZSA9IHNpZ25lckFkZHJlc3M7CiAgICBmcmFtZV9kaWcgLTIKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czo3CiAgICAvLyBrZXk6ICJzaWduYXR1cmUiLAogICAgYnl0ZWNfMCAvLyAic2lnbmF0dXJlIgogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LmFsZ28udHM6MjUKICAgIC8vIHRoaXMuc2lnbmF0dXJlLnZhbHVlID0gc2lnbmF0dXJlRGF0YTsKICAgIGZyYW1lX2RpZyAtMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5hbGdvLnRzOjI2CiAgICAvLyByZXR1cm4gc2lnbmF0dXJlRGF0YTsKICAgIGZyYW1lX2RpZyAtMQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LmFsZ28udHM6OkRpZ2l0YWxTaWduYXR1cmVTdG9yYWdlLmdldFNpZ25hdHVyZSgpIC0+IGJ5dGVzOgpnZXRTaWduYXR1cmU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czo3CiAgICAvLyBrZXk6ICJzaWduYXR1cmUiLAogICAgaW50Y18xIC8vIDAKICAgIGJ5dGVjXzAgLy8gInNpZ25hdHVyZSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czozNAogICAgLy8gcmV0dXJuIHRoaXMuc2lnbmF0dXJlLnZhbHVlOwogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LmFsZ28udHM6OkRpZ2l0YWxTaWduYXR1cmVTdG9yYWdlLmdldFNpZ25lcigpIC0+IGJ5dGVzOgpnZXRTaWduZXI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czoxMwogICAgLy8ga2V5OiAic2lnbmVyIiwKICAgIGludGNfMSAvLyAwCiAgICBieXRlY18xIC8vICJzaWduZXIiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LmFsZ28udHM6NDIKICAgIC8vIHJldHVybiB0aGlzLnNpZ25lci52YWx1ZTsKICAgIHJldHN1Ygo=","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAQAmBAlzaWduYXR1cmUGc2lnbmVyBBUffHUAMRhAAAYoK2cpK2cxG0EAcoIDBA5ksEQE/WiF9gS3cRm3NhoAjgMAMgAaAAIjQzEZFEQxGESIAGhJFRZXBgJMUCpMULAiQzEZFEQxGESIAEtJFRZXBgJMUCpMULAiQzEZFEQxGEQ2GgFXAgA2GgJXAgCIABlJFRZXBgJMUCpMULAiQzEZQP+lMRgURCJDigIBKYv+ZyiL/2eL/4kjKGVEiSMpZUSJ","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the DigitalSignatureStorage contract
 */
export type DigitalSignatureStorageArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'storeSignature(string,string)string': {
      /**
       * Address of the person signing
       */
      signerAddress: string
      /**
       * Digital signature string (e.g., hash of document)
       */
      signatureData: string
    }
    'getSignature()string': Record<string, never>
    'getSigner()string': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'storeSignature(string,string)string': [signerAddress: string, signatureData: string]
    'getSignature()string': []
    'getSigner()string': []
  }
}

/**
 * The return type for each method
 */
export type DigitalSignatureStorageReturns = {
  'storeSignature(string,string)string': string
  'getSignature()string': string
  'getSigner()string': string
}

/**
 * Defines the types of available calls and state of the DigitalSignatureStorage smart contract.
 */
export type DigitalSignatureStorageTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'storeSignature(string,string)string' | 'storeSignature', {
      argsObj: DigitalSignatureStorageArgs['obj']['storeSignature(string,string)string']
      argsTuple: DigitalSignatureStorageArgs['tuple']['storeSignature(string,string)string']
      /**
       * The stored signature
       */
      returns: DigitalSignatureStorageReturns['storeSignature(string,string)string']
    }>
    & Record<'getSignature()string' | 'getSignature', {
      argsObj: DigitalSignatureStorageArgs['obj']['getSignature()string']
      argsTuple: DigitalSignatureStorageArgs['tuple']['getSignature()string']
      /**
       * The stored signature
       */
      returns: DigitalSignatureStorageReturns['getSignature()string']
    }>
    & Record<'getSigner()string' | 'getSigner', {
      argsObj: DigitalSignatureStorageArgs['obj']['getSigner()string']
      argsTuple: DigitalSignatureStorageArgs['tuple']['getSigner()string']
      /**
       * The signer address
       */
      returns: DigitalSignatureStorageReturns['getSigner()string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        signature: string
        signer: string
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type DigitalSignatureStorageSignatures = keyof DigitalSignatureStorageTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type DigitalSignatureStorageNonVoidMethodSignatures = keyof DigitalSignatureStorageTypes['methods'] extends infer T ? T extends keyof DigitalSignatureStorageTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the DigitalSignatureStorage smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends DigitalSignatureStorageSignatures> = DigitalSignatureStorageTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the DigitalSignatureStorage smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DigitalSignatureStorageSignatures> = DigitalSignatureStorageTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = DigitalSignatureStorageTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type DigitalSignatureStorageCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type DigitalSignatureStorageDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: DigitalSignatureStorageCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the DigitalSignatureStorage smart contract
 */
export abstract class DigitalSignatureStorageParamsFactory {
  /**
   * Constructs a no op call for the storeSignature(string,string)string ABI method
   *
   * Save a digital signature with the signer's address
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeSignature(params: CallParams<DigitalSignatureStorageArgs['obj']['storeSignature(string,string)string'] | DigitalSignatureStorageArgs['tuple']['storeSignature(string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeSignature(string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.signerAddress, params.args.signatureData],
    }
  }
  /**
   * Constructs a no op call for the getSignature()string ABI method
   *
   * Retrieve the stored signature
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getSignature(params: CallParams<DigitalSignatureStorageArgs['obj']['getSignature()string'] | DigitalSignatureStorageArgs['tuple']['getSignature()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getSignature()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getSigner()string ABI method
   *
   * Retrieve the signerâ€™s address
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getSigner(params: CallParams<DigitalSignatureStorageArgs['obj']['getSigner()string'] | DigitalSignatureStorageArgs['tuple']['getSigner()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getSigner()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the DigitalSignatureStorage smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class DigitalSignatureStorageFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `DigitalSignatureStorageFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new DigitalSignatureStorageClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new DigitalSignatureStorageClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the DigitalSignatureStorage smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: DigitalSignatureStorageDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new DigitalSignatureStorageClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DigitalSignatureStorage smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DigitalSignatureStorage smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DigitalSignatureStorage smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new DigitalSignatureStorageClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the DigitalSignatureStorage smart contract
 */
export class DigitalSignatureStorageClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `DigitalSignatureStorageClient`
   *
   * @param appClient An `AppClient` instance which has been created with the DigitalSignatureStorage app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `DigitalSignatureStorageClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends DigitalSignatureStorageNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `DigitalSignatureStorageClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<DigitalSignatureStorageClient> {
    return new DigitalSignatureStorageClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `DigitalSignatureStorageClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<DigitalSignatureStorageClient> {
    return new DigitalSignatureStorageClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the DigitalSignatureStorage smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the DigitalSignatureStorage smart contract using the `storeSignature(string,string)string` ABI method.
     *
     * Save a digital signature with the signer's address
     *
     * @param params The params for the smart contract call
     * @returns The call params: The stored signature
     */
    storeSignature: (params: CallParams<DigitalSignatureStorageArgs['obj']['storeSignature(string,string)string'] | DigitalSignatureStorageArgs['tuple']['storeSignature(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DigitalSignatureStorageParamsFactory.storeSignature(params))
    },

    /**
     * Makes a call to the DigitalSignatureStorage smart contract using the `getSignature()string` ABI method.
     *
     * Retrieve the stored signature
     *
     * @param params The params for the smart contract call
     * @returns The call params: The stored signature
     */
    getSignature: (params: CallParams<DigitalSignatureStorageArgs['obj']['getSignature()string'] | DigitalSignatureStorageArgs['tuple']['getSignature()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DigitalSignatureStorageParamsFactory.getSignature(params))
    },

    /**
     * Makes a call to the DigitalSignatureStorage smart contract using the `getSigner()string` ABI method.
     *
     * Retrieve the signerâ€™s address
     *
     * @param params The params for the smart contract call
     * @returns The call params: The signer address
     */
    getSigner: (params: CallParams<DigitalSignatureStorageArgs['obj']['getSigner()string'] | DigitalSignatureStorageArgs['tuple']['getSigner()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DigitalSignatureStorageParamsFactory.getSigner(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the DigitalSignatureStorage smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the DigitalSignatureStorage smart contract using the `storeSignature(string,string)string` ABI method.
     *
     * Save a digital signature with the signer's address
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The stored signature
     */
    storeSignature: (params: CallParams<DigitalSignatureStorageArgs['obj']['storeSignature(string,string)string'] | DigitalSignatureStorageArgs['tuple']['storeSignature(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DigitalSignatureStorageParamsFactory.storeSignature(params))
    },

    /**
     * Makes a call to the DigitalSignatureStorage smart contract using the `getSignature()string` ABI method.
     *
     * Retrieve the stored signature
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The stored signature
     */
    getSignature: (params: CallParams<DigitalSignatureStorageArgs['obj']['getSignature()string'] | DigitalSignatureStorageArgs['tuple']['getSignature()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DigitalSignatureStorageParamsFactory.getSignature(params))
    },

    /**
     * Makes a call to the DigitalSignatureStorage smart contract using the `getSigner()string` ABI method.
     *
     * Retrieve the signerâ€™s address
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The signer address
     */
    getSigner: (params: CallParams<DigitalSignatureStorageArgs['obj']['getSigner()string'] | DigitalSignatureStorageArgs['tuple']['getSigner()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DigitalSignatureStorageParamsFactory.getSigner(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the DigitalSignatureStorage smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the DigitalSignatureStorage smart contract using the `storeSignature(string,string)string` ABI method.
     *
     * Save a digital signature with the signer's address
     *
     * @param params The params for the smart contract call
     * @returns The call result: The stored signature
     */
    storeSignature: async (params: CallParams<DigitalSignatureStorageArgs['obj']['storeSignature(string,string)string'] | DigitalSignatureStorageArgs['tuple']['storeSignature(string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DigitalSignatureStorageParamsFactory.storeSignature(params))
      return {...result, return: result.return as unknown as (undefined | DigitalSignatureStorageReturns['storeSignature(string,string)string'])}
    },

    /**
     * Makes a call to the DigitalSignatureStorage smart contract using the `getSignature()string` ABI method.
     *
     * Retrieve the stored signature
     *
     * @param params The params for the smart contract call
     * @returns The call result: The stored signature
     */
    getSignature: async (params: CallParams<DigitalSignatureStorageArgs['obj']['getSignature()string'] | DigitalSignatureStorageArgs['tuple']['getSignature()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DigitalSignatureStorageParamsFactory.getSignature(params))
      return {...result, return: result.return as unknown as (undefined | DigitalSignatureStorageReturns['getSignature()string'])}
    },

    /**
     * Makes a call to the DigitalSignatureStorage smart contract using the `getSigner()string` ABI method.
     *
     * Retrieve the signerâ€™s address
     *
     * @param params The params for the smart contract call
     * @returns The call result: The signer address
     */
    getSigner: async (params: CallParams<DigitalSignatureStorageArgs['obj']['getSigner()string'] | DigitalSignatureStorageArgs['tuple']['getSigner()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DigitalSignatureStorageParamsFactory.getSigner(params))
      return {...result, return: result.return as unknown as (undefined | DigitalSignatureStorageReturns['getSigner()string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new DigitalSignatureStorageClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current DigitalSignatureStorage app
   */
  state = {
    /**
     * Methods to access global state for the current DigitalSignatureStorage app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          signature: result.signature,
          signer: result.signer,
        }
      },
      /**
       * Get the current value of the signature key in global state
       */
      signature: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("signature")) as string | undefined },
      /**
       * Get the current value of the signer key in global state
       */
      signer: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("signer")) as string | undefined },
    },
  }

  public newGroup(): DigitalSignatureStorageComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a storeSignature(string,string)string method call against the DigitalSignatureStorage contract
       */
      storeSignature(params: CallParams<DigitalSignatureStorageArgs['obj']['storeSignature(string,string)string'] | DigitalSignatureStorageArgs['tuple']['storeSignature(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeSignature(params)))
        resultMappers.push((v) => client.decodeReturnValue('storeSignature(string,string)string', v))
        return this
      },
      /**
       * Add a getSignature()string method call against the DigitalSignatureStorage contract
       */
      getSignature(params: CallParams<DigitalSignatureStorageArgs['obj']['getSignature()string'] | DigitalSignatureStorageArgs['tuple']['getSignature()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getSignature(params)))
        resultMappers.push((v) => client.decodeReturnValue('getSignature()string', v))
        return this
      },
      /**
       * Add a getSigner()string method call against the DigitalSignatureStorage contract
       */
      getSigner(params: CallParams<DigitalSignatureStorageArgs['obj']['getSigner()string'] | DigitalSignatureStorageArgs['tuple']['getSigner()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getSigner(params)))
        resultMappers.push((v) => client.decodeReturnValue('getSigner()string', v))
        return this
      },
      /**
       * Add a clear state call to the DigitalSignatureStorage contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as DigitalSignatureStorageComposer
  }
}
export type DigitalSignatureStorageComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the storeSignature(string,string)string ABI method.
   *
   * Save a digital signature with the signer's address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeSignature(params?: CallParams<DigitalSignatureStorageArgs['obj']['storeSignature(string,string)string'] | DigitalSignatureStorageArgs['tuple']['storeSignature(string,string)string']>): DigitalSignatureStorageComposer<[...TReturns, DigitalSignatureStorageReturns['storeSignature(string,string)string'] | undefined]>

  /**
   * Calls the getSignature()string ABI method.
   *
   * Retrieve the stored signature
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getSignature(params?: CallParams<DigitalSignatureStorageArgs['obj']['getSignature()string'] | DigitalSignatureStorageArgs['tuple']['getSignature()string']>): DigitalSignatureStorageComposer<[...TReturns, DigitalSignatureStorageReturns['getSignature()string'] | undefined]>

  /**
   * Calls the getSigner()string ABI method.
   *
   * Retrieve the signerâ€™s address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getSigner(params?: CallParams<DigitalSignatureStorageArgs['obj']['getSigner()string'] | DigitalSignatureStorageArgs['tuple']['getSigner()string']>): DigitalSignatureStorageComposer<[...TReturns, DigitalSignatureStorageReturns['getSigner()string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the DigitalSignatureStorage smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): DigitalSignatureStorageComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): DigitalSignatureStorageComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<DigitalSignatureStorageComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<DigitalSignatureStorageComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<DigitalSignatureStorageComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<DigitalSignatureStorageComposerResults<TReturns>>
}
export type DigitalSignatureStorageComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

