#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0
    bytecblock "signature" "signer" 0x151f7c75 ""
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/hello_world/contract.algo.ts:7
    // key: "signature",
    bytec_0 // "signature"
    // smart_contracts/hello_world/contract.algo.ts:8
    // initialValue: "",
    bytec_3 // ""
    // smart_contracts/hello_world/contract.algo.ts:6-9
    // signature = GlobalState<string>({
    //   key: "signature",
    //   initialValue: "",
    // });
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:13
    // key: "signer",
    bytec_1 // "signer"
    // smart_contracts/hello_world/contract.algo.ts:14
    // initialValue: "",
    bytec_3 // ""
    // smart_contracts/hello_world/contract.algo.ts:12-15
    // signer = GlobalState<string>({
    //   key: "signer",
    //   initialValue: "",
    // });
    app_global_put

main_after_if_else@2:
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class DigitalSignatureStorage extends Contract {
    txn NumAppArgs
    bz main_bare_routing@10
    pushbytess 0x0e64b044 0xfd6885f6 0xb77119b7 // method "storeSignature(string,string)string", method "getSignature()string", method "getSigner()string"
    txna ApplicationArgs 0
    match main_storeSignature_route@5 main_getSignature_route@6 main_getSigner_route@7

main_after_if_else@14:
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class DigitalSignatureStorage extends Contract {
    intc_1 // 0
    return

main_getSigner_route@7:
    // smart_contracts/hello_world/contract.algo.ts:41
    // getSigner(): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getSigner
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_getSignature_route@6:
    // smart_contracts/hello_world/contract.algo.ts:33
    // getSignature(): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getSignature
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_storeSignature_route@5:
    // smart_contracts/hello_world/contract.algo.ts:23
    // storeSignature(signerAddress: string, signatureData: string): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class DigitalSignatureStorage extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // smart_contracts/hello_world/contract.algo.ts:23
    // storeSignature(signerAddress: string, signatureData: string): string {
    callsub storeSignature
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@10:
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class DigitalSignatureStorage extends Contract {
    txn OnCompletion
    bnz main_after_if_else@14
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// smart_contracts/hello_world/contract.algo.ts::DigitalSignatureStorage.storeSignature(signerAddress: bytes, signatureData: bytes) -> bytes:
storeSignature:
    // smart_contracts/hello_world/contract.algo.ts:23
    // storeSignature(signerAddress: string, signatureData: string): string {
    proto 2 1
    // smart_contracts/hello_world/contract.algo.ts:13
    // key: "signer",
    bytec_1 // "signer"
    // smart_contracts/hello_world/contract.algo.ts:24
    // this.signer.value = signerAddress;
    frame_dig -2
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:7
    // key: "signature",
    bytec_0 // "signature"
    // smart_contracts/hello_world/contract.algo.ts:25
    // this.signature.value = signatureData;
    frame_dig -1
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:26
    // return signatureData;
    frame_dig -1
    retsub


// smart_contracts/hello_world/contract.algo.ts::DigitalSignatureStorage.getSignature() -> bytes:
getSignature:
    // smart_contracts/hello_world/contract.algo.ts:7
    // key: "signature",
    intc_1 // 0
    bytec_0 // "signature"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/hello_world/contract.algo.ts:34
    // return this.signature.value;
    retsub


// smart_contracts/hello_world/contract.algo.ts::DigitalSignatureStorage.getSigner() -> bytes:
getSigner:
    // smart_contracts/hello_world/contract.algo.ts:13
    // key: "signer",
    intc_1 // 0
    bytec_1 // "signer"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/hello_world/contract.algo.ts:42
    // return this.signer.value;
    retsub
